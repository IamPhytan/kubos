Querying an OBC for Telemetry Data
==================================

At some point, users will want to fetch data which was written to the telemetry database
(for an example of this, see the :doc:`mission application <first-mission-app>` tutorial).

This tutorial will walk the user through the process of communicating with the telemetry database service
in order to retrieve a desired set of telemetry information.

Pre-Requisites
--------------

- :doc:`Install the Kubos SDK <../installation-docs/sdk-installing>`
- Have an OBC available with ethernet capabilities
  (preferably with an :doc:`installation of Kubos Linux <../installation-docs/index>`)

    - :ref:`Configuring Ethernet <ethernet>`

- Have the telemetry database service running on a target OBC (this happens by default when running KubOS)

Setup
-----

In order to have something to query, we'll need to seed the database.

.. note::

    For all commands, replace the ``10.0.2.20`` value with the IP address of your OBC.
    The example commands will also be referencing the telemetry database service's default port, 8006

From your instance of the SDK, run the following::

    $ echo "mutation {insert(subsystem:\"eps\",parameter:\"voltage\",value:\"5.0\"){success}}" | nc -uw1 10.0.2.20 8006
    $ echo "mutation {insert(subsystem:\"eps\",parameter:\"voltage\",value:\"5.0\"){success}}" | nc -uw1 10.0.2.20 8006
    $ echo "mutation {insert(subsystem:\"eps\",parameter:\"current\",value:\"0.1\"){success}}" | nc -uw1 10.0.2.20 8006
    $ echo "mutation {insert(subsystem:\"eps\",parameter:\"current\",value:\"0.1\"){success}}" | nc -uw1 10.0.2.20 8006
    $ echo "mutation {insert(subsystem:\"gps\",parameter:\"voltage\",value:\"3.3\"){success}}" | nc -uw1 10.0.2.20 8006
    
Each of these commands should return the following::

    {"errs":"","msg":{"insert":{"success":true}}}

Schema
------

The ``telemetry`` query can be used to fetch a certain selection of data from the telemetry database.
It will return an array of database entries.

The query has the following schema::

    query {
        telemetry(timestampGe: Integer, timestampLe: Integer, subsystem: String, parameter: String, limit: Integer): [{
            timestamp: Integer!
            subsystem: String!
            parameter: String!
            value: String!
        }]
    }
    
Each of the input arguments acts as a filter for the database query:

    - timestampGe - Return entries with timestamps occurring on or after the given value
    - timestampLe - Return entries with timestamps occurring on or before the given value
    - subsystem - Return entries which match the given subsystem name
    - parameter - Return entries which match the given parameter name
    - limit - Return only the first `n` entries found

Using the ``telemetry`` query without specifying any of the input arguments will result in all
entries in the telemetry database being returned.

The query returns an array of entries, each of which has the following response fields:

    - timestamp - The system time when the entry was recorded, in milliseconds since UNIX epoch
    - subsystem - The subsystem which generated the entry data
    - parameter - The specific data point the entry corresponds to
    - value - The value of the data point

Querying a Specific Subsystem
-----------------------------

In order to return a telemetry generated by a specific subsystem, we'll send a query using the
``subsystem`` input parameter.

For example, to get only telemetry from our (fake) EPS subsystem, we'll send the following::

    $ echo "{telemetry(subsystem:\"eps\"){timestamp,subsystem,parameter,value}}" | nc -uw1 168.168.2.20 8006
    
Adding a little bit of formatting, the request should return something like this::

    {
        "errs": "",
        "msg": {
            "telemetry": [
                {
                    "parameter": "current",
                    "subsystem": "eps",
                    "timestamp": 9244010,
                    "value": "0.1"
                },
                {
                    "parameter": "current",
                    "subsystem": "eps",
                    "timestamp": 9241449,
                    "value": "0.1"
                },
                {
                    "parameter": "voltage",
                    "subsystem": "eps",
                    "timestamp": 9223180,
                    "value": "5.0"
                },
                {
                    "parameter": "voltage",
                    "subsystem": "eps",
                    "timestamp": 9208828,
                    "value": "5.0"
                }
            ]   
        }
    }

Querying a Time Frame
---------------------

If we want to fetch the telemetry from a particular time frame, for example all telemetry occurring
between 1pm and 2pm, we'll use a combination of

Limiting the Results
--------------------

Let's say we only want to know the most recent voltage reading from our EPS subsystem.
